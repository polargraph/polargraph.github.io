{"version":3,"sources":["Header.js","About.js","Contact.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Navbar","bg","expand","Container","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","target","Component","About","Row","Col","md","Image","src","fluid","Contact","scripts","Home","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loadScript","getUrlParameter","name","replace","results","RegExp","exec","window","location","decodeURIComponent","handleChange","bind","assertThisInitialized","value","Dropdown","variant","Menu","map","script","index","Item","lib_default","url","e","setState","App","src_Header","react_router_dom","react_router","path","exact","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6f7d855.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Container, Navbar, Nav } from 'react-bootstrap';\n\nclass Header extends Component {\n  render() {\n    return (\n\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Container>\n        <Navbar.Brand href=\"/\">Polargraph</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/\">Home</Nav.Link>\n            <Nav.Link href=\"#about\">About</Nav.Link>\n            <Nav.Link href=\"#contact\">Contact</Nav.Link>\n            <Nav.Link href=\"https://github.com/polargraph/\" target=\"_blank\">Git</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './App.css';\nimport {Container, Row, Col, Image} from 'react-bootstrap'\n\nclass About extends Component {\n  render() {\n    return (\n      <Container className=\"About\">\n      <Row className=\"mt-5\">\n        <Col md={6}>\n          <h1>About</h1>\n        </Col>\n      </Row>\n      <Row className=\"mt-5\">\n        <Col md={6}>\n          <p> Photographs are shot and shared rapidly over social media sites with no intention on the quality of the image itself. Also, countless images are created by machines for machines only that leaves behind human awareness outside of the loop, using CCTV, computer vision algorithms and other automated, networked technologies. As a matter with drawing & chalk: it is a perfect contrast for these hegemonies, where the act of drawing (thus image creation) is extremely limited in terms of colours and line qualities, so we decided to automate the process of chalk drawing, by building polargraphs that are drawing algorithmically formalised thoughts on the wall. </p>\n        </Col>\n        <Col md={6}>\n          <Image src=\"http://www.binaura.net/assets/images/polargraph/004.jpg\" fluid/>\n        </Col>\n      </Row>\n      </Container>\n    );\n  }\n}\n\nexport default About;\n","import React, { Component } from 'react';\nimport './App.css';\nimport {Container, Row, Col, Image} from 'react-bootstrap'\n\nclass Contact extends Component {\n  render() {\n    return (\n      <Container className=\"Contact\">\n        <Row className=\"mt-5\">\n          <Col md={6}>\n            <h1>Contact</h1>\n          </Col>\n        </Row>\n        <Row className=\"mt-5\">\n          <Col md={6}>\n            <p> Binaura Â© 2019 </p>\n          </Col>\n          <Col md={6}>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Contact;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Dropdown, Container, Navbar } from 'react-bootstrap';\nimport Script from 'react-load-script'\n\n\nlet scripts = ['/main.js', '/main.js', '/main.js', '/main.js'];\nclass Home extends Component {\n  state = {\n    loadScript: 0\n  }\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = { value: '' };\n  }\n  render() {\n    let loadScript = scripts[this.getUrlParameter('script') ? this.getUrlParameter('script') : 0];\n    return (\n      <div className=\"Contact\">\n        <Navbar className=\"secondBar\">\n          <Container>\n            <Dropdown className=\"mt-2 mb-2\">\n              <Dropdown.Toggle variant=\"outline-secondary\" id=\"dropdown-basic\">\n                Load other script\n              </Dropdown.Toggle>\n\n              <Dropdown.Menu>\n                { scripts.map((script, index) =>\n                  <Dropdown.Item href={'/?script=' + index}> {script} </Dropdown.Item>\n                ) }\n              </Dropdown.Menu>\n            </Dropdown>\n          </Container>\n        </Navbar>\n        <Script url={loadScript}/>\n      </div>\n    );\n  }\n\n  componentDidMount () {\n    \n  }\n\n  getUrlParameter = (name) => {\n    name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n    let regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\n    let results = regex.exec(window.location.href);\n    return results === null ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n  };\n\n  handleChange (e) {\n    this.setState({ loadScript: e });\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport Header from './Header.js'\nimport About from './About.js'\nimport Contact from './Contact.js'\nimport Home from './Home.js'\nimport { Container } from 'react-bootstrap';\nimport './App.css';\nimport { HashRouter, Switch, Route, Link } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header/>\n\n\n        <HashRouter>\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/contact\" component={Contact} />\n          </Switch>\n        </HashRouter>\n        <div id=\"canvas\"> </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}